
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Burns
 * 
 */
export type Burns = $Result.DefaultSelection<Prisma.$BurnsPayload>
/**
 * Model Municipalities
 * 
 */
export type Municipalities = $Result.DefaultSelection<Prisma.$MunicipalitiesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserType: {
  REGULAR: 'REGULAR',
  ICNF: 'ICNF',
  CM: 'CM'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const StateUser: {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED'
};

export type StateUser = (typeof StateUser)[keyof typeof StateUser]


export const BurnType: {
  REGCLEAN: 'REGCLEAN',
  PARTICULAR: 'PARTICULAR'
};

export type BurnType = (typeof BurnType)[keyof typeof BurnType]


export const State: {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  DENIED: 'DENIED',
  DELETED: 'DELETED'
};

export type State = (typeof State)[keyof typeof State]

}

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type StateUser = $Enums.StateUser

export const StateUser: typeof $Enums.StateUser

export type BurnType = $Enums.BurnType

export const BurnType: typeof $Enums.BurnType

export type State = $Enums.State

export const State: typeof $Enums.State

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.burns`: Exposes CRUD operations for the **Burns** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Burns
    * const burns = await prisma.burns.findMany()
    * ```
    */
  get burns(): Prisma.BurnsDelegate<ExtArgs>;

  /**
   * `prisma.municipalities`: Exposes CRUD operations for the **Municipalities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Municipalities
    * const municipalities = await prisma.municipalities.findMany()
    * ```
    */
  get municipalities(): Prisma.MunicipalitiesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Burns: 'Burns',
    Municipalities: 'Municipalities'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "burns" | "municipalities"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Burns: {
        payload: Prisma.$BurnsPayload<ExtArgs>
        fields: Prisma.BurnsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BurnsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BurnsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>
          }
          findFirst: {
            args: Prisma.BurnsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BurnsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>
          }
          findMany: {
            args: Prisma.BurnsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>[]
          }
          create: {
            args: Prisma.BurnsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>
          }
          createMany: {
            args: Prisma.BurnsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BurnsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>[]
          }
          delete: {
            args: Prisma.BurnsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>
          }
          update: {
            args: Prisma.BurnsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>
          }
          deleteMany: {
            args: Prisma.BurnsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BurnsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BurnsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurnsPayload>
          }
          aggregate: {
            args: Prisma.BurnsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBurns>
          }
          groupBy: {
            args: Prisma.BurnsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BurnsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BurnsCountArgs<ExtArgs>
            result: $Utils.Optional<BurnsCountAggregateOutputType> | number
          }
        }
      }
      Municipalities: {
        payload: Prisma.$MunicipalitiesPayload<ExtArgs>
        fields: Prisma.MunicipalitiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MunicipalitiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MunicipalitiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>
          }
          findFirst: {
            args: Prisma.MunicipalitiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MunicipalitiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>
          }
          findMany: {
            args: Prisma.MunicipalitiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>[]
          }
          create: {
            args: Prisma.MunicipalitiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>
          }
          createMany: {
            args: Prisma.MunicipalitiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MunicipalitiesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>[]
          }
          delete: {
            args: Prisma.MunicipalitiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>
          }
          update: {
            args: Prisma.MunicipalitiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>
          }
          deleteMany: {
            args: Prisma.MunicipalitiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MunicipalitiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MunicipalitiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipalitiesPayload>
          }
          aggregate: {
            args: Prisma.MunicipalitiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMunicipalities>
          }
          groupBy: {
            args: Prisma.MunicipalitiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MunicipalitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MunicipalitiesCountArgs<ExtArgs>
            result: $Utils.Optional<MunicipalitiesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    burns: number
    municipality: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    burns?: boolean | UsersCountOutputTypeCountBurnsArgs
    municipality?: boolean | UsersCountOutputTypeCountMunicipalityArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBurnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BurnsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMunicipalityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MunicipalitiesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    nif: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    nif: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    nif: number | null
    password: string | null
    photo: string | null
    type: $Enums.UserType | null
    createdAt: Date | null
    updatedAt: Date | null
    state: $Enums.StateUser | null
    resetToken: string | null
    resetTokenExpires: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    nif: number | null
    password: string | null
    photo: string | null
    type: $Enums.UserType | null
    createdAt: Date | null
    updatedAt: Date | null
    state: $Enums.StateUser | null
    resetToken: string | null
    resetTokenExpires: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    nif: number
    password: number
    photo: number
    type: number
    createdAt: number
    updatedAt: number
    state: number
    resetToken: number
    resetTokenExpires: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    nif?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    nif?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    nif?: true
    password?: true
    photo?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    state?: true
    resetToken?: true
    resetTokenExpires?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    nif?: true
    password?: true
    photo?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    state?: true
    resetToken?: true
    resetTokenExpires?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    nif?: true
    password?: true
    photo?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    state?: true
    resetToken?: true
    resetTokenExpires?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    nif: number | null
    password: string
    photo: string | null
    type: $Enums.UserType
    createdAt: Date
    updatedAt: Date
    state: $Enums.StateUser
    resetToken: string | null
    resetTokenExpires: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    nif?: boolean
    password?: boolean
    photo?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
    burns?: boolean | Users$burnsArgs<ExtArgs>
    municipality?: boolean | Users$municipalityArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    nif?: boolean
    password?: boolean
    photo?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    nif?: boolean
    password?: boolean
    photo?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    burns?: boolean | Users$burnsArgs<ExtArgs>
    municipality?: boolean | Users$municipalityArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      burns: Prisma.$BurnsPayload<ExtArgs>[]
      municipality: Prisma.$MunicipalitiesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      nif: number | null
      password: string
      photo: string | null
      type: $Enums.UserType
      createdAt: Date
      updatedAt: Date
      state: $Enums.StateUser
      resetToken: string | null
      resetTokenExpires: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    burns<T extends Users$burnsArgs<ExtArgs> = {}>(args?: Subset<T, Users$burnsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "findMany"> | Null>
    municipality<T extends Users$municipalityArgs<ExtArgs> = {}>(args?: Subset<T, Users$municipalityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly name: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly nif: FieldRef<"Users", 'Int'>
    readonly password: FieldRef<"Users", 'String'>
    readonly photo: FieldRef<"Users", 'String'>
    readonly type: FieldRef<"Users", 'UserType'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly state: FieldRef<"Users", 'StateUser'>
    readonly resetToken: FieldRef<"Users", 'String'>
    readonly resetTokenExpires: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.burns
   */
  export type Users$burnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    where?: BurnsWhereInput
    orderBy?: BurnsOrderByWithRelationInput | BurnsOrderByWithRelationInput[]
    cursor?: BurnsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BurnsScalarFieldEnum | BurnsScalarFieldEnum[]
  }

  /**
   * Users.municipality
   */
  export type Users$municipalityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    where?: MunicipalitiesWhereInput
    orderBy?: MunicipalitiesOrderByWithRelationInput | MunicipalitiesOrderByWithRelationInput[]
    cursor?: MunicipalitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MunicipalitiesScalarFieldEnum | MunicipalitiesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Burns
   */

  export type AggregateBurns = {
    _count: BurnsCountAggregateOutputType | null
    _avg: BurnsAvgAggregateOutputType | null
    _sum: BurnsSumAggregateOutputType | null
    _min: BurnsMinAggregateOutputType | null
    _max: BurnsMaxAggregateOutputType | null
  }

  export type BurnsAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    userId: number | null
  }

  export type BurnsSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    userId: number | null
  }

  export type BurnsMinAggregateOutputType = {
    id: number | null
    date: Date | null
    reason: string | null
    latitude: number | null
    longitude: number | null
    otherData: string | null
    distrito: string | null
    concelho: string | null
    freguesia: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    type: $Enums.BurnType | null
    state: $Enums.State | null
  }

  export type BurnsMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    reason: string | null
    latitude: number | null
    longitude: number | null
    otherData: string | null
    distrito: string | null
    concelho: string | null
    freguesia: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    type: $Enums.BurnType | null
    state: $Enums.State | null
  }

  export type BurnsCountAggregateOutputType = {
    id: number
    date: number
    reason: number
    latitude: number
    longitude: number
    otherData: number
    distrito: number
    concelho: number
    freguesia: number
    createdAt: number
    updatedAt: number
    userId: number
    type: number
    state: number
    _all: number
  }


  export type BurnsAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    userId?: true
  }

  export type BurnsSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    userId?: true
  }

  export type BurnsMinAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    latitude?: true
    longitude?: true
    otherData?: true
    distrito?: true
    concelho?: true
    freguesia?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    type?: true
    state?: true
  }

  export type BurnsMaxAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    latitude?: true
    longitude?: true
    otherData?: true
    distrito?: true
    concelho?: true
    freguesia?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    type?: true
    state?: true
  }

  export type BurnsCountAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    latitude?: true
    longitude?: true
    otherData?: true
    distrito?: true
    concelho?: true
    freguesia?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    type?: true
    state?: true
    _all?: true
  }

  export type BurnsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Burns to aggregate.
     */
    where?: BurnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Burns to fetch.
     */
    orderBy?: BurnsOrderByWithRelationInput | BurnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BurnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Burns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Burns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Burns
    **/
    _count?: true | BurnsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BurnsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BurnsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BurnsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BurnsMaxAggregateInputType
  }

  export type GetBurnsAggregateType<T extends BurnsAggregateArgs> = {
        [P in keyof T & keyof AggregateBurns]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBurns[P]>
      : GetScalarType<T[P], AggregateBurns[P]>
  }




  export type BurnsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BurnsWhereInput
    orderBy?: BurnsOrderByWithAggregationInput | BurnsOrderByWithAggregationInput[]
    by: BurnsScalarFieldEnum[] | BurnsScalarFieldEnum
    having?: BurnsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BurnsCountAggregateInputType | true
    _avg?: BurnsAvgAggregateInputType
    _sum?: BurnsSumAggregateInputType
    _min?: BurnsMinAggregateInputType
    _max?: BurnsMaxAggregateInputType
  }

  export type BurnsGroupByOutputType = {
    id: number
    date: Date
    reason: string
    latitude: number
    longitude: number
    otherData: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt: Date
    updatedAt: Date
    userId: number
    type: $Enums.BurnType
    state: $Enums.State
    _count: BurnsCountAggregateOutputType | null
    _avg: BurnsAvgAggregateOutputType | null
    _sum: BurnsSumAggregateOutputType | null
    _min: BurnsMinAggregateOutputType | null
    _max: BurnsMaxAggregateOutputType | null
  }

  type GetBurnsGroupByPayload<T extends BurnsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BurnsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BurnsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BurnsGroupByOutputType[P]>
            : GetScalarType<T[P], BurnsGroupByOutputType[P]>
        }
      >
    >


  export type BurnsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    reason?: boolean
    latitude?: boolean
    longitude?: boolean
    otherData?: boolean
    distrito?: boolean
    concelho?: boolean
    freguesia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    type?: boolean
    state?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["burns"]>

  export type BurnsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    reason?: boolean
    latitude?: boolean
    longitude?: boolean
    otherData?: boolean
    distrito?: boolean
    concelho?: boolean
    freguesia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    type?: boolean
    state?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["burns"]>

  export type BurnsSelectScalar = {
    id?: boolean
    date?: boolean
    reason?: boolean
    latitude?: boolean
    longitude?: boolean
    otherData?: boolean
    distrito?: boolean
    concelho?: boolean
    freguesia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    type?: boolean
    state?: boolean
  }

  export type BurnsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type BurnsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $BurnsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Burns"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      reason: string
      latitude: number
      longitude: number
      otherData: string | null
      distrito: string
      concelho: string
      freguesia: string
      createdAt: Date
      updatedAt: Date
      userId: number
      type: $Enums.BurnType
      state: $Enums.State
    }, ExtArgs["result"]["burns"]>
    composites: {}
  }

  type BurnsGetPayload<S extends boolean | null | undefined | BurnsDefaultArgs> = $Result.GetResult<Prisma.$BurnsPayload, S>

  type BurnsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BurnsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BurnsCountAggregateInputType | true
    }

  export interface BurnsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Burns'], meta: { name: 'Burns' } }
    /**
     * Find zero or one Burns that matches the filter.
     * @param {BurnsFindUniqueArgs} args - Arguments to find a Burns
     * @example
     * // Get one Burns
     * const burns = await prisma.burns.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BurnsFindUniqueArgs>(args: SelectSubset<T, BurnsFindUniqueArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Burns that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BurnsFindUniqueOrThrowArgs} args - Arguments to find a Burns
     * @example
     * // Get one Burns
     * const burns = await prisma.burns.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BurnsFindUniqueOrThrowArgs>(args: SelectSubset<T, BurnsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Burns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsFindFirstArgs} args - Arguments to find a Burns
     * @example
     * // Get one Burns
     * const burns = await prisma.burns.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BurnsFindFirstArgs>(args?: SelectSubset<T, BurnsFindFirstArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Burns that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsFindFirstOrThrowArgs} args - Arguments to find a Burns
     * @example
     * // Get one Burns
     * const burns = await prisma.burns.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BurnsFindFirstOrThrowArgs>(args?: SelectSubset<T, BurnsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Burns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Burns
     * const burns = await prisma.burns.findMany()
     * 
     * // Get first 10 Burns
     * const burns = await prisma.burns.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const burnsWithIdOnly = await prisma.burns.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BurnsFindManyArgs>(args?: SelectSubset<T, BurnsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Burns.
     * @param {BurnsCreateArgs} args - Arguments to create a Burns.
     * @example
     * // Create one Burns
     * const Burns = await prisma.burns.create({
     *   data: {
     *     // ... data to create a Burns
     *   }
     * })
     * 
     */
    create<T extends BurnsCreateArgs>(args: SelectSubset<T, BurnsCreateArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Burns.
     * @param {BurnsCreateManyArgs} args - Arguments to create many Burns.
     * @example
     * // Create many Burns
     * const burns = await prisma.burns.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BurnsCreateManyArgs>(args?: SelectSubset<T, BurnsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Burns and returns the data saved in the database.
     * @param {BurnsCreateManyAndReturnArgs} args - Arguments to create many Burns.
     * @example
     * // Create many Burns
     * const burns = await prisma.burns.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Burns and only return the `id`
     * const burnsWithIdOnly = await prisma.burns.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BurnsCreateManyAndReturnArgs>(args?: SelectSubset<T, BurnsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Burns.
     * @param {BurnsDeleteArgs} args - Arguments to delete one Burns.
     * @example
     * // Delete one Burns
     * const Burns = await prisma.burns.delete({
     *   where: {
     *     // ... filter to delete one Burns
     *   }
     * })
     * 
     */
    delete<T extends BurnsDeleteArgs>(args: SelectSubset<T, BurnsDeleteArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Burns.
     * @param {BurnsUpdateArgs} args - Arguments to update one Burns.
     * @example
     * // Update one Burns
     * const burns = await prisma.burns.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BurnsUpdateArgs>(args: SelectSubset<T, BurnsUpdateArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Burns.
     * @param {BurnsDeleteManyArgs} args - Arguments to filter Burns to delete.
     * @example
     * // Delete a few Burns
     * const { count } = await prisma.burns.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BurnsDeleteManyArgs>(args?: SelectSubset<T, BurnsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Burns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Burns
     * const burns = await prisma.burns.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BurnsUpdateManyArgs>(args: SelectSubset<T, BurnsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Burns.
     * @param {BurnsUpsertArgs} args - Arguments to update or create a Burns.
     * @example
     * // Update or create a Burns
     * const burns = await prisma.burns.upsert({
     *   create: {
     *     // ... data to create a Burns
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Burns we want to update
     *   }
     * })
     */
    upsert<T extends BurnsUpsertArgs>(args: SelectSubset<T, BurnsUpsertArgs<ExtArgs>>): Prisma__BurnsClient<$Result.GetResult<Prisma.$BurnsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Burns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsCountArgs} args - Arguments to filter Burns to count.
     * @example
     * // Count the number of Burns
     * const count = await prisma.burns.count({
     *   where: {
     *     // ... the filter for the Burns we want to count
     *   }
     * })
    **/
    count<T extends BurnsCountArgs>(
      args?: Subset<T, BurnsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BurnsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Burns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BurnsAggregateArgs>(args: Subset<T, BurnsAggregateArgs>): Prisma.PrismaPromise<GetBurnsAggregateType<T>>

    /**
     * Group by Burns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BurnsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BurnsGroupByArgs['orderBy'] }
        : { orderBy?: BurnsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BurnsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBurnsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Burns model
   */
  readonly fields: BurnsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Burns.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BurnsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Burns model
   */ 
  interface BurnsFieldRefs {
    readonly id: FieldRef<"Burns", 'Int'>
    readonly date: FieldRef<"Burns", 'DateTime'>
    readonly reason: FieldRef<"Burns", 'String'>
    readonly latitude: FieldRef<"Burns", 'Float'>
    readonly longitude: FieldRef<"Burns", 'Float'>
    readonly otherData: FieldRef<"Burns", 'String'>
    readonly distrito: FieldRef<"Burns", 'String'>
    readonly concelho: FieldRef<"Burns", 'String'>
    readonly freguesia: FieldRef<"Burns", 'String'>
    readonly createdAt: FieldRef<"Burns", 'DateTime'>
    readonly updatedAt: FieldRef<"Burns", 'DateTime'>
    readonly userId: FieldRef<"Burns", 'Int'>
    readonly type: FieldRef<"Burns", 'BurnType'>
    readonly state: FieldRef<"Burns", 'State'>
  }
    

  // Custom InputTypes
  /**
   * Burns findUnique
   */
  export type BurnsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * Filter, which Burns to fetch.
     */
    where: BurnsWhereUniqueInput
  }

  /**
   * Burns findUniqueOrThrow
   */
  export type BurnsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * Filter, which Burns to fetch.
     */
    where: BurnsWhereUniqueInput
  }

  /**
   * Burns findFirst
   */
  export type BurnsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * Filter, which Burns to fetch.
     */
    where?: BurnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Burns to fetch.
     */
    orderBy?: BurnsOrderByWithRelationInput | BurnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Burns.
     */
    cursor?: BurnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Burns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Burns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Burns.
     */
    distinct?: BurnsScalarFieldEnum | BurnsScalarFieldEnum[]
  }

  /**
   * Burns findFirstOrThrow
   */
  export type BurnsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * Filter, which Burns to fetch.
     */
    where?: BurnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Burns to fetch.
     */
    orderBy?: BurnsOrderByWithRelationInput | BurnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Burns.
     */
    cursor?: BurnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Burns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Burns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Burns.
     */
    distinct?: BurnsScalarFieldEnum | BurnsScalarFieldEnum[]
  }

  /**
   * Burns findMany
   */
  export type BurnsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * Filter, which Burns to fetch.
     */
    where?: BurnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Burns to fetch.
     */
    orderBy?: BurnsOrderByWithRelationInput | BurnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Burns.
     */
    cursor?: BurnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Burns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Burns.
     */
    skip?: number
    distinct?: BurnsScalarFieldEnum | BurnsScalarFieldEnum[]
  }

  /**
   * Burns create
   */
  export type BurnsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * The data needed to create a Burns.
     */
    data: XOR<BurnsCreateInput, BurnsUncheckedCreateInput>
  }

  /**
   * Burns createMany
   */
  export type BurnsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Burns.
     */
    data: BurnsCreateManyInput | BurnsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Burns createManyAndReturn
   */
  export type BurnsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Burns.
     */
    data: BurnsCreateManyInput | BurnsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Burns update
   */
  export type BurnsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * The data needed to update a Burns.
     */
    data: XOR<BurnsUpdateInput, BurnsUncheckedUpdateInput>
    /**
     * Choose, which Burns to update.
     */
    where: BurnsWhereUniqueInput
  }

  /**
   * Burns updateMany
   */
  export type BurnsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Burns.
     */
    data: XOR<BurnsUpdateManyMutationInput, BurnsUncheckedUpdateManyInput>
    /**
     * Filter which Burns to update
     */
    where?: BurnsWhereInput
  }

  /**
   * Burns upsert
   */
  export type BurnsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * The filter to search for the Burns to update in case it exists.
     */
    where: BurnsWhereUniqueInput
    /**
     * In case the Burns found by the `where` argument doesn't exist, create a new Burns with this data.
     */
    create: XOR<BurnsCreateInput, BurnsUncheckedCreateInput>
    /**
     * In case the Burns was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BurnsUpdateInput, BurnsUncheckedUpdateInput>
  }

  /**
   * Burns delete
   */
  export type BurnsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
    /**
     * Filter which Burns to delete.
     */
    where: BurnsWhereUniqueInput
  }

  /**
   * Burns deleteMany
   */
  export type BurnsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Burns to delete
     */
    where?: BurnsWhereInput
  }

  /**
   * Burns without action
   */
  export type BurnsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Burns
     */
    select?: BurnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnsInclude<ExtArgs> | null
  }


  /**
   * Model Municipalities
   */

  export type AggregateMunicipalities = {
    _count: MunicipalitiesCountAggregateOutputType | null
    _avg: MunicipalitiesAvgAggregateOutputType | null
    _sum: MunicipalitiesSumAggregateOutputType | null
    _min: MunicipalitiesMinAggregateOutputType | null
    _max: MunicipalitiesMaxAggregateOutputType | null
  }

  export type MunicipalitiesAvgAggregateOutputType = {
    id: number | null
    responsible: number | null
  }

  export type MunicipalitiesSumAggregateOutputType = {
    id: number | null
    responsible: number | null
  }

  export type MunicipalitiesMinAggregateOutputType = {
    id: number | null
    name: string | null
    taxNumber: string | null
    address: string | null
    state: $Enums.State | null
    responsible: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MunicipalitiesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    taxNumber: string | null
    address: string | null
    state: $Enums.State | null
    responsible: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MunicipalitiesCountAggregateOutputType = {
    id: number
    name: number
    taxNumber: number
    address: number
    state: number
    responsible: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MunicipalitiesAvgAggregateInputType = {
    id?: true
    responsible?: true
  }

  export type MunicipalitiesSumAggregateInputType = {
    id?: true
    responsible?: true
  }

  export type MunicipalitiesMinAggregateInputType = {
    id?: true
    name?: true
    taxNumber?: true
    address?: true
    state?: true
    responsible?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MunicipalitiesMaxAggregateInputType = {
    id?: true
    name?: true
    taxNumber?: true
    address?: true
    state?: true
    responsible?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MunicipalitiesCountAggregateInputType = {
    id?: true
    name?: true
    taxNumber?: true
    address?: true
    state?: true
    responsible?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MunicipalitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Municipalities to aggregate.
     */
    where?: MunicipalitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipalities to fetch.
     */
    orderBy?: MunicipalitiesOrderByWithRelationInput | MunicipalitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MunicipalitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Municipalities
    **/
    _count?: true | MunicipalitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MunicipalitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MunicipalitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MunicipalitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MunicipalitiesMaxAggregateInputType
  }

  export type GetMunicipalitiesAggregateType<T extends MunicipalitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateMunicipalities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMunicipalities[P]>
      : GetScalarType<T[P], AggregateMunicipalities[P]>
  }




  export type MunicipalitiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MunicipalitiesWhereInput
    orderBy?: MunicipalitiesOrderByWithAggregationInput | MunicipalitiesOrderByWithAggregationInput[]
    by: MunicipalitiesScalarFieldEnum[] | MunicipalitiesScalarFieldEnum
    having?: MunicipalitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MunicipalitiesCountAggregateInputType | true
    _avg?: MunicipalitiesAvgAggregateInputType
    _sum?: MunicipalitiesSumAggregateInputType
    _min?: MunicipalitiesMinAggregateInputType
    _max?: MunicipalitiesMaxAggregateInputType
  }

  export type MunicipalitiesGroupByOutputType = {
    id: number
    name: string
    taxNumber: string
    address: string
    state: $Enums.State
    responsible: number | null
    createdAt: Date
    updatedAt: Date
    _count: MunicipalitiesCountAggregateOutputType | null
    _avg: MunicipalitiesAvgAggregateOutputType | null
    _sum: MunicipalitiesSumAggregateOutputType | null
    _min: MunicipalitiesMinAggregateOutputType | null
    _max: MunicipalitiesMaxAggregateOutputType | null
  }

  type GetMunicipalitiesGroupByPayload<T extends MunicipalitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MunicipalitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MunicipalitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MunicipalitiesGroupByOutputType[P]>
            : GetScalarType<T[P], MunicipalitiesGroupByOutputType[P]>
        }
      >
    >


  export type MunicipalitiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    taxNumber?: boolean
    address?: boolean
    state?: boolean
    responsible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Municipalities$userArgs<ExtArgs>
  }, ExtArgs["result"]["municipalities"]>

  export type MunicipalitiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    taxNumber?: boolean
    address?: boolean
    state?: boolean
    responsible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Municipalities$userArgs<ExtArgs>
  }, ExtArgs["result"]["municipalities"]>

  export type MunicipalitiesSelectScalar = {
    id?: boolean
    name?: boolean
    taxNumber?: boolean
    address?: boolean
    state?: boolean
    responsible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MunicipalitiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Municipalities$userArgs<ExtArgs>
  }
  export type MunicipalitiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Municipalities$userArgs<ExtArgs>
  }

  export type $MunicipalitiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Municipalities"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      taxNumber: string
      address: string
      state: $Enums.State
      responsible: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["municipalities"]>
    composites: {}
  }

  type MunicipalitiesGetPayload<S extends boolean | null | undefined | MunicipalitiesDefaultArgs> = $Result.GetResult<Prisma.$MunicipalitiesPayload, S>

  type MunicipalitiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MunicipalitiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MunicipalitiesCountAggregateInputType | true
    }

  export interface MunicipalitiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Municipalities'], meta: { name: 'Municipalities' } }
    /**
     * Find zero or one Municipalities that matches the filter.
     * @param {MunicipalitiesFindUniqueArgs} args - Arguments to find a Municipalities
     * @example
     * // Get one Municipalities
     * const municipalities = await prisma.municipalities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MunicipalitiesFindUniqueArgs>(args: SelectSubset<T, MunicipalitiesFindUniqueArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Municipalities that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MunicipalitiesFindUniqueOrThrowArgs} args - Arguments to find a Municipalities
     * @example
     * // Get one Municipalities
     * const municipalities = await prisma.municipalities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MunicipalitiesFindUniqueOrThrowArgs>(args: SelectSubset<T, MunicipalitiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Municipalities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesFindFirstArgs} args - Arguments to find a Municipalities
     * @example
     * // Get one Municipalities
     * const municipalities = await prisma.municipalities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MunicipalitiesFindFirstArgs>(args?: SelectSubset<T, MunicipalitiesFindFirstArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Municipalities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesFindFirstOrThrowArgs} args - Arguments to find a Municipalities
     * @example
     * // Get one Municipalities
     * const municipalities = await prisma.municipalities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MunicipalitiesFindFirstOrThrowArgs>(args?: SelectSubset<T, MunicipalitiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Municipalities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Municipalities
     * const municipalities = await prisma.municipalities.findMany()
     * 
     * // Get first 10 Municipalities
     * const municipalities = await prisma.municipalities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const municipalitiesWithIdOnly = await prisma.municipalities.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MunicipalitiesFindManyArgs>(args?: SelectSubset<T, MunicipalitiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Municipalities.
     * @param {MunicipalitiesCreateArgs} args - Arguments to create a Municipalities.
     * @example
     * // Create one Municipalities
     * const Municipalities = await prisma.municipalities.create({
     *   data: {
     *     // ... data to create a Municipalities
     *   }
     * })
     * 
     */
    create<T extends MunicipalitiesCreateArgs>(args: SelectSubset<T, MunicipalitiesCreateArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Municipalities.
     * @param {MunicipalitiesCreateManyArgs} args - Arguments to create many Municipalities.
     * @example
     * // Create many Municipalities
     * const municipalities = await prisma.municipalities.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MunicipalitiesCreateManyArgs>(args?: SelectSubset<T, MunicipalitiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Municipalities and returns the data saved in the database.
     * @param {MunicipalitiesCreateManyAndReturnArgs} args - Arguments to create many Municipalities.
     * @example
     * // Create many Municipalities
     * const municipalities = await prisma.municipalities.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Municipalities and only return the `id`
     * const municipalitiesWithIdOnly = await prisma.municipalities.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MunicipalitiesCreateManyAndReturnArgs>(args?: SelectSubset<T, MunicipalitiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Municipalities.
     * @param {MunicipalitiesDeleteArgs} args - Arguments to delete one Municipalities.
     * @example
     * // Delete one Municipalities
     * const Municipalities = await prisma.municipalities.delete({
     *   where: {
     *     // ... filter to delete one Municipalities
     *   }
     * })
     * 
     */
    delete<T extends MunicipalitiesDeleteArgs>(args: SelectSubset<T, MunicipalitiesDeleteArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Municipalities.
     * @param {MunicipalitiesUpdateArgs} args - Arguments to update one Municipalities.
     * @example
     * // Update one Municipalities
     * const municipalities = await prisma.municipalities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MunicipalitiesUpdateArgs>(args: SelectSubset<T, MunicipalitiesUpdateArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Municipalities.
     * @param {MunicipalitiesDeleteManyArgs} args - Arguments to filter Municipalities to delete.
     * @example
     * // Delete a few Municipalities
     * const { count } = await prisma.municipalities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MunicipalitiesDeleteManyArgs>(args?: SelectSubset<T, MunicipalitiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Municipalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Municipalities
     * const municipalities = await prisma.municipalities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MunicipalitiesUpdateManyArgs>(args: SelectSubset<T, MunicipalitiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Municipalities.
     * @param {MunicipalitiesUpsertArgs} args - Arguments to update or create a Municipalities.
     * @example
     * // Update or create a Municipalities
     * const municipalities = await prisma.municipalities.upsert({
     *   create: {
     *     // ... data to create a Municipalities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Municipalities we want to update
     *   }
     * })
     */
    upsert<T extends MunicipalitiesUpsertArgs>(args: SelectSubset<T, MunicipalitiesUpsertArgs<ExtArgs>>): Prisma__MunicipalitiesClient<$Result.GetResult<Prisma.$MunicipalitiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Municipalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesCountArgs} args - Arguments to filter Municipalities to count.
     * @example
     * // Count the number of Municipalities
     * const count = await prisma.municipalities.count({
     *   where: {
     *     // ... the filter for the Municipalities we want to count
     *   }
     * })
    **/
    count<T extends MunicipalitiesCountArgs>(
      args?: Subset<T, MunicipalitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MunicipalitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Municipalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MunicipalitiesAggregateArgs>(args: Subset<T, MunicipalitiesAggregateArgs>): Prisma.PrismaPromise<GetMunicipalitiesAggregateType<T>>

    /**
     * Group by Municipalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipalitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MunicipalitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MunicipalitiesGroupByArgs['orderBy'] }
        : { orderBy?: MunicipalitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MunicipalitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMunicipalitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Municipalities model
   */
  readonly fields: MunicipalitiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Municipalities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MunicipalitiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Municipalities$userArgs<ExtArgs> = {}>(args?: Subset<T, Municipalities$userArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Municipalities model
   */ 
  interface MunicipalitiesFieldRefs {
    readonly id: FieldRef<"Municipalities", 'Int'>
    readonly name: FieldRef<"Municipalities", 'String'>
    readonly taxNumber: FieldRef<"Municipalities", 'String'>
    readonly address: FieldRef<"Municipalities", 'String'>
    readonly state: FieldRef<"Municipalities", 'State'>
    readonly responsible: FieldRef<"Municipalities", 'Int'>
    readonly createdAt: FieldRef<"Municipalities", 'DateTime'>
    readonly updatedAt: FieldRef<"Municipalities", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Municipalities findUnique
   */
  export type MunicipalitiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * Filter, which Municipalities to fetch.
     */
    where: MunicipalitiesWhereUniqueInput
  }

  /**
   * Municipalities findUniqueOrThrow
   */
  export type MunicipalitiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * Filter, which Municipalities to fetch.
     */
    where: MunicipalitiesWhereUniqueInput
  }

  /**
   * Municipalities findFirst
   */
  export type MunicipalitiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * Filter, which Municipalities to fetch.
     */
    where?: MunicipalitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipalities to fetch.
     */
    orderBy?: MunicipalitiesOrderByWithRelationInput | MunicipalitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Municipalities.
     */
    cursor?: MunicipalitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Municipalities.
     */
    distinct?: MunicipalitiesScalarFieldEnum | MunicipalitiesScalarFieldEnum[]
  }

  /**
   * Municipalities findFirstOrThrow
   */
  export type MunicipalitiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * Filter, which Municipalities to fetch.
     */
    where?: MunicipalitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipalities to fetch.
     */
    orderBy?: MunicipalitiesOrderByWithRelationInput | MunicipalitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Municipalities.
     */
    cursor?: MunicipalitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Municipalities.
     */
    distinct?: MunicipalitiesScalarFieldEnum | MunicipalitiesScalarFieldEnum[]
  }

  /**
   * Municipalities findMany
   */
  export type MunicipalitiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * Filter, which Municipalities to fetch.
     */
    where?: MunicipalitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipalities to fetch.
     */
    orderBy?: MunicipalitiesOrderByWithRelationInput | MunicipalitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Municipalities.
     */
    cursor?: MunicipalitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipalities.
     */
    skip?: number
    distinct?: MunicipalitiesScalarFieldEnum | MunicipalitiesScalarFieldEnum[]
  }

  /**
   * Municipalities create
   */
  export type MunicipalitiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * The data needed to create a Municipalities.
     */
    data: XOR<MunicipalitiesCreateInput, MunicipalitiesUncheckedCreateInput>
  }

  /**
   * Municipalities createMany
   */
  export type MunicipalitiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Municipalities.
     */
    data: MunicipalitiesCreateManyInput | MunicipalitiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Municipalities createManyAndReturn
   */
  export type MunicipalitiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Municipalities.
     */
    data: MunicipalitiesCreateManyInput | MunicipalitiesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Municipalities update
   */
  export type MunicipalitiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * The data needed to update a Municipalities.
     */
    data: XOR<MunicipalitiesUpdateInput, MunicipalitiesUncheckedUpdateInput>
    /**
     * Choose, which Municipalities to update.
     */
    where: MunicipalitiesWhereUniqueInput
  }

  /**
   * Municipalities updateMany
   */
  export type MunicipalitiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Municipalities.
     */
    data: XOR<MunicipalitiesUpdateManyMutationInput, MunicipalitiesUncheckedUpdateManyInput>
    /**
     * Filter which Municipalities to update
     */
    where?: MunicipalitiesWhereInput
  }

  /**
   * Municipalities upsert
   */
  export type MunicipalitiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * The filter to search for the Municipalities to update in case it exists.
     */
    where: MunicipalitiesWhereUniqueInput
    /**
     * In case the Municipalities found by the `where` argument doesn't exist, create a new Municipalities with this data.
     */
    create: XOR<MunicipalitiesCreateInput, MunicipalitiesUncheckedCreateInput>
    /**
     * In case the Municipalities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MunicipalitiesUpdateInput, MunicipalitiesUncheckedUpdateInput>
  }

  /**
   * Municipalities delete
   */
  export type MunicipalitiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
    /**
     * Filter which Municipalities to delete.
     */
    where: MunicipalitiesWhereUniqueInput
  }

  /**
   * Municipalities deleteMany
   */
  export type MunicipalitiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Municipalities to delete
     */
    where?: MunicipalitiesWhereInput
  }

  /**
   * Municipalities.user
   */
  export type Municipalities$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Municipalities without action
   */
  export type MunicipalitiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipalities
     */
    select?: MunicipalitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipalitiesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    nif: 'nif',
    password: 'password',
    photo: 'photo',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    state: 'state',
    resetToken: 'resetToken',
    resetTokenExpires: 'resetTokenExpires'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const BurnsScalarFieldEnum: {
    id: 'id',
    date: 'date',
    reason: 'reason',
    latitude: 'latitude',
    longitude: 'longitude',
    otherData: 'otherData',
    distrito: 'distrito',
    concelho: 'concelho',
    freguesia: 'freguesia',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    type: 'type',
    state: 'state'
  };

  export type BurnsScalarFieldEnum = (typeof BurnsScalarFieldEnum)[keyof typeof BurnsScalarFieldEnum]


  export const MunicipalitiesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    taxNumber: 'taxNumber',
    address: 'address',
    state: 'state',
    responsible: 'responsible',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MunicipalitiesScalarFieldEnum = (typeof MunicipalitiesScalarFieldEnum)[keyof typeof MunicipalitiesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'UserType[]'
   */
  export type ListEnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'StateUser'
   */
  export type EnumStateUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StateUser'>
    


  /**
   * Reference to a field of type 'StateUser[]'
   */
  export type ListEnumStateUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StateUser[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BurnType'
   */
  export type EnumBurnTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BurnType'>
    


  /**
   * Reference to a field of type 'BurnType[]'
   */
  export type ListEnumBurnTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BurnType[]'>
    


  /**
   * Reference to a field of type 'State'
   */
  export type EnumStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'State'>
    


  /**
   * Reference to a field of type 'State[]'
   */
  export type ListEnumStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'State[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    name?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    nif?: IntNullableFilter<"Users"> | number | null
    password?: StringFilter<"Users"> | string
    photo?: StringNullableFilter<"Users"> | string | null
    type?: EnumUserTypeFilter<"Users"> | $Enums.UserType
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    state?: EnumStateUserFilter<"Users"> | $Enums.StateUser
    resetToken?: StringNullableFilter<"Users"> | string | null
    resetTokenExpires?: DateTimeNullableFilter<"Users"> | Date | string | null
    burns?: BurnsListRelationFilter
    municipality?: MunicipalitiesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    nif?: SortOrderInput | SortOrder
    password?: SortOrder
    photo?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpires?: SortOrderInput | SortOrder
    burns?: BurnsOrderByRelationAggregateInput
    municipality?: MunicipalitiesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    nif?: number
    resetToken?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    photo?: StringNullableFilter<"Users"> | string | null
    type?: EnumUserTypeFilter<"Users"> | $Enums.UserType
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    state?: EnumStateUserFilter<"Users"> | $Enums.StateUser
    resetTokenExpires?: DateTimeNullableFilter<"Users"> | Date | string | null
    burns?: BurnsListRelationFilter
    municipality?: MunicipalitiesListRelationFilter
  }, "id" | "email" | "nif" | "resetToken">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    nif?: SortOrderInput | SortOrder
    password?: SortOrder
    photo?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpires?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    name?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    nif?: IntNullableWithAggregatesFilter<"Users"> | number | null
    password?: StringWithAggregatesFilter<"Users"> | string
    photo?: StringNullableWithAggregatesFilter<"Users"> | string | null
    type?: EnumUserTypeWithAggregatesFilter<"Users"> | $Enums.UserType
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    state?: EnumStateUserWithAggregatesFilter<"Users"> | $Enums.StateUser
    resetToken?: StringNullableWithAggregatesFilter<"Users"> | string | null
    resetTokenExpires?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
  }

  export type BurnsWhereInput = {
    AND?: BurnsWhereInput | BurnsWhereInput[]
    OR?: BurnsWhereInput[]
    NOT?: BurnsWhereInput | BurnsWhereInput[]
    id?: IntFilter<"Burns"> | number
    date?: DateTimeFilter<"Burns"> | Date | string
    reason?: StringFilter<"Burns"> | string
    latitude?: FloatFilter<"Burns"> | number
    longitude?: FloatFilter<"Burns"> | number
    otherData?: StringNullableFilter<"Burns"> | string | null
    distrito?: StringFilter<"Burns"> | string
    concelho?: StringFilter<"Burns"> | string
    freguesia?: StringFilter<"Burns"> | string
    createdAt?: DateTimeFilter<"Burns"> | Date | string
    updatedAt?: DateTimeFilter<"Burns"> | Date | string
    userId?: IntFilter<"Burns"> | number
    type?: EnumBurnTypeFilter<"Burns"> | $Enums.BurnType
    state?: EnumStateFilter<"Burns"> | $Enums.State
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type BurnsOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    otherData?: SortOrderInput | SortOrder
    distrito?: SortOrder
    concelho?: SortOrder
    freguesia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type BurnsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BurnsWhereInput | BurnsWhereInput[]
    OR?: BurnsWhereInput[]
    NOT?: BurnsWhereInput | BurnsWhereInput[]
    date?: DateTimeFilter<"Burns"> | Date | string
    reason?: StringFilter<"Burns"> | string
    latitude?: FloatFilter<"Burns"> | number
    longitude?: FloatFilter<"Burns"> | number
    otherData?: StringNullableFilter<"Burns"> | string | null
    distrito?: StringFilter<"Burns"> | string
    concelho?: StringFilter<"Burns"> | string
    freguesia?: StringFilter<"Burns"> | string
    createdAt?: DateTimeFilter<"Burns"> | Date | string
    updatedAt?: DateTimeFilter<"Burns"> | Date | string
    userId?: IntFilter<"Burns"> | number
    type?: EnumBurnTypeFilter<"Burns"> | $Enums.BurnType
    state?: EnumStateFilter<"Burns"> | $Enums.State
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type BurnsOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    otherData?: SortOrderInput | SortOrder
    distrito?: SortOrder
    concelho?: SortOrder
    freguesia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    _count?: BurnsCountOrderByAggregateInput
    _avg?: BurnsAvgOrderByAggregateInput
    _max?: BurnsMaxOrderByAggregateInput
    _min?: BurnsMinOrderByAggregateInput
    _sum?: BurnsSumOrderByAggregateInput
  }

  export type BurnsScalarWhereWithAggregatesInput = {
    AND?: BurnsScalarWhereWithAggregatesInput | BurnsScalarWhereWithAggregatesInput[]
    OR?: BurnsScalarWhereWithAggregatesInput[]
    NOT?: BurnsScalarWhereWithAggregatesInput | BurnsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Burns"> | number
    date?: DateTimeWithAggregatesFilter<"Burns"> | Date | string
    reason?: StringWithAggregatesFilter<"Burns"> | string
    latitude?: FloatWithAggregatesFilter<"Burns"> | number
    longitude?: FloatWithAggregatesFilter<"Burns"> | number
    otherData?: StringNullableWithAggregatesFilter<"Burns"> | string | null
    distrito?: StringWithAggregatesFilter<"Burns"> | string
    concelho?: StringWithAggregatesFilter<"Burns"> | string
    freguesia?: StringWithAggregatesFilter<"Burns"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Burns"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Burns"> | Date | string
    userId?: IntWithAggregatesFilter<"Burns"> | number
    type?: EnumBurnTypeWithAggregatesFilter<"Burns"> | $Enums.BurnType
    state?: EnumStateWithAggregatesFilter<"Burns"> | $Enums.State
  }

  export type MunicipalitiesWhereInput = {
    AND?: MunicipalitiesWhereInput | MunicipalitiesWhereInput[]
    OR?: MunicipalitiesWhereInput[]
    NOT?: MunicipalitiesWhereInput | MunicipalitiesWhereInput[]
    id?: IntFilter<"Municipalities"> | number
    name?: StringFilter<"Municipalities"> | string
    taxNumber?: StringFilter<"Municipalities"> | string
    address?: StringFilter<"Municipalities"> | string
    state?: EnumStateFilter<"Municipalities"> | $Enums.State
    responsible?: IntNullableFilter<"Municipalities"> | number | null
    createdAt?: DateTimeFilter<"Municipalities"> | Date | string
    updatedAt?: DateTimeFilter<"Municipalities"> | Date | string
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type MunicipalitiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    taxNumber?: SortOrder
    address?: SortOrder
    state?: SortOrder
    responsible?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type MunicipalitiesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: MunicipalitiesWhereInput | MunicipalitiesWhereInput[]
    OR?: MunicipalitiesWhereInput[]
    NOT?: MunicipalitiesWhereInput | MunicipalitiesWhereInput[]
    taxNumber?: StringFilter<"Municipalities"> | string
    address?: StringFilter<"Municipalities"> | string
    state?: EnumStateFilter<"Municipalities"> | $Enums.State
    responsible?: IntNullableFilter<"Municipalities"> | number | null
    createdAt?: DateTimeFilter<"Municipalities"> | Date | string
    updatedAt?: DateTimeFilter<"Municipalities"> | Date | string
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id" | "name">

  export type MunicipalitiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    taxNumber?: SortOrder
    address?: SortOrder
    state?: SortOrder
    responsible?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MunicipalitiesCountOrderByAggregateInput
    _avg?: MunicipalitiesAvgOrderByAggregateInput
    _max?: MunicipalitiesMaxOrderByAggregateInput
    _min?: MunicipalitiesMinOrderByAggregateInput
    _sum?: MunicipalitiesSumOrderByAggregateInput
  }

  export type MunicipalitiesScalarWhereWithAggregatesInput = {
    AND?: MunicipalitiesScalarWhereWithAggregatesInput | MunicipalitiesScalarWhereWithAggregatesInput[]
    OR?: MunicipalitiesScalarWhereWithAggregatesInput[]
    NOT?: MunicipalitiesScalarWhereWithAggregatesInput | MunicipalitiesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Municipalities"> | number
    name?: StringWithAggregatesFilter<"Municipalities"> | string
    taxNumber?: StringWithAggregatesFilter<"Municipalities"> | string
    address?: StringWithAggregatesFilter<"Municipalities"> | string
    state?: EnumStateWithAggregatesFilter<"Municipalities"> | $Enums.State
    responsible?: IntNullableWithAggregatesFilter<"Municipalities"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Municipalities"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Municipalities"> | Date | string
  }

  export type UsersCreateInput = {
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    burns?: BurnsCreateNestedManyWithoutUserInput
    municipality?: MunicipalitiesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    burns?: BurnsUncheckedCreateNestedManyWithoutUserInput
    municipality?: MunicipalitiesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    burns?: BurnsUpdateManyWithoutUserNestedInput
    municipality?: MunicipalitiesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    burns?: BurnsUncheckedUpdateManyWithoutUserNestedInput
    municipality?: MunicipalitiesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BurnsCreateInput = {
    date: Date | string
    reason: string
    latitude: number
    longitude: number
    otherData?: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: $Enums.BurnType
    state?: $Enums.State
    user: UsersCreateNestedOneWithoutBurnsInput
  }

  export type BurnsUncheckedCreateInput = {
    id?: number
    date: Date | string
    reason: string
    latitude: number
    longitude: number
    otherData?: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    type?: $Enums.BurnType
    state?: $Enums.State
  }

  export type BurnsUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    user?: UsersUpdateOneRequiredWithoutBurnsNestedInput
  }

  export type BurnsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
  }

  export type BurnsCreateManyInput = {
    id?: number
    date: Date | string
    reason: string
    latitude: number
    longitude: number
    otherData?: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    type?: $Enums.BurnType
    state?: $Enums.State
  }

  export type BurnsUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
  }

  export type BurnsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
  }

  export type MunicipalitiesCreateInput = {
    name: string
    taxNumber: string
    address: string
    state?: $Enums.State
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UsersCreateNestedOneWithoutMunicipalityInput
  }

  export type MunicipalitiesUncheckedCreateInput = {
    id?: number
    name: string
    taxNumber: string
    address: string
    state?: $Enums.State
    responsible?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MunicipalitiesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneWithoutMunicipalityNestedInput
  }

  export type MunicipalitiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    responsible?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MunicipalitiesCreateManyInput = {
    id?: number
    name: string
    taxNumber: string
    address: string
    state?: $Enums.State
    responsible?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MunicipalitiesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MunicipalitiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    responsible?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumStateUserFilter<$PrismaModel = never> = {
    equals?: $Enums.StateUser | EnumStateUserFieldRefInput<$PrismaModel>
    in?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    not?: NestedEnumStateUserFilter<$PrismaModel> | $Enums.StateUser
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BurnsListRelationFilter = {
    every?: BurnsWhereInput
    some?: BurnsWhereInput
    none?: BurnsWhereInput
  }

  export type MunicipalitiesListRelationFilter = {
    every?: MunicipalitiesWhereInput
    some?: MunicipalitiesWhereInput
    none?: MunicipalitiesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BurnsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MunicipalitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    nif?: SortOrder
    password?: SortOrder
    photo?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: SortOrder
    resetToken?: SortOrder
    resetTokenExpires?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    nif?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    nif?: SortOrder
    password?: SortOrder
    photo?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: SortOrder
    resetToken?: SortOrder
    resetTokenExpires?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    nif?: SortOrder
    password?: SortOrder
    photo?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: SortOrder
    resetToken?: SortOrder
    resetTokenExpires?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    nif?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumStateUserWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StateUser | EnumStateUserFieldRefInput<$PrismaModel>
    in?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    not?: NestedEnumStateUserWithAggregatesFilter<$PrismaModel> | $Enums.StateUser
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateUserFilter<$PrismaModel>
    _max?: NestedEnumStateUserFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumBurnTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BurnType | EnumBurnTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBurnTypeFilter<$PrismaModel> | $Enums.BurnType
  }

  export type EnumStateFilter<$PrismaModel = never> = {
    equals?: $Enums.State | EnumStateFieldRefInput<$PrismaModel>
    in?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    not?: NestedEnumStateFilter<$PrismaModel> | $Enums.State
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type BurnsCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    otherData?: SortOrder
    distrito?: SortOrder
    concelho?: SortOrder
    freguesia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    state?: SortOrder
  }

  export type BurnsAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
  }

  export type BurnsMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    otherData?: SortOrder
    distrito?: SortOrder
    concelho?: SortOrder
    freguesia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    state?: SortOrder
  }

  export type BurnsMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    otherData?: SortOrder
    distrito?: SortOrder
    concelho?: SortOrder
    freguesia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    state?: SortOrder
  }

  export type BurnsSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumBurnTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BurnType | EnumBurnTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBurnTypeWithAggregatesFilter<$PrismaModel> | $Enums.BurnType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBurnTypeFilter<$PrismaModel>
    _max?: NestedEnumBurnTypeFilter<$PrismaModel>
  }

  export type EnumStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.State | EnumStateFieldRefInput<$PrismaModel>
    in?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    not?: NestedEnumStateWithAggregatesFilter<$PrismaModel> | $Enums.State
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateFilter<$PrismaModel>
    _max?: NestedEnumStateFilter<$PrismaModel>
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type MunicipalitiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    taxNumber?: SortOrder
    address?: SortOrder
    state?: SortOrder
    responsible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MunicipalitiesAvgOrderByAggregateInput = {
    id?: SortOrder
    responsible?: SortOrder
  }

  export type MunicipalitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    taxNumber?: SortOrder
    address?: SortOrder
    state?: SortOrder
    responsible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MunicipalitiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    taxNumber?: SortOrder
    address?: SortOrder
    state?: SortOrder
    responsible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MunicipalitiesSumOrderByAggregateInput = {
    id?: SortOrder
    responsible?: SortOrder
  }

  export type BurnsCreateNestedManyWithoutUserInput = {
    create?: XOR<BurnsCreateWithoutUserInput, BurnsUncheckedCreateWithoutUserInput> | BurnsCreateWithoutUserInput[] | BurnsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnsCreateOrConnectWithoutUserInput | BurnsCreateOrConnectWithoutUserInput[]
    createMany?: BurnsCreateManyUserInputEnvelope
    connect?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
  }

  export type MunicipalitiesCreateNestedManyWithoutUserInput = {
    create?: XOR<MunicipalitiesCreateWithoutUserInput, MunicipalitiesUncheckedCreateWithoutUserInput> | MunicipalitiesCreateWithoutUserInput[] | MunicipalitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MunicipalitiesCreateOrConnectWithoutUserInput | MunicipalitiesCreateOrConnectWithoutUserInput[]
    createMany?: MunicipalitiesCreateManyUserInputEnvelope
    connect?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
  }

  export type BurnsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BurnsCreateWithoutUserInput, BurnsUncheckedCreateWithoutUserInput> | BurnsCreateWithoutUserInput[] | BurnsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnsCreateOrConnectWithoutUserInput | BurnsCreateOrConnectWithoutUserInput[]
    createMany?: BurnsCreateManyUserInputEnvelope
    connect?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
  }

  export type MunicipalitiesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MunicipalitiesCreateWithoutUserInput, MunicipalitiesUncheckedCreateWithoutUserInput> | MunicipalitiesCreateWithoutUserInput[] | MunicipalitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MunicipalitiesCreateOrConnectWithoutUserInput | MunicipalitiesCreateOrConnectWithoutUserInput[]
    createMany?: MunicipalitiesCreateManyUserInputEnvelope
    connect?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStateUserFieldUpdateOperationsInput = {
    set?: $Enums.StateUser
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BurnsUpdateManyWithoutUserNestedInput = {
    create?: XOR<BurnsCreateWithoutUserInput, BurnsUncheckedCreateWithoutUserInput> | BurnsCreateWithoutUserInput[] | BurnsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnsCreateOrConnectWithoutUserInput | BurnsCreateOrConnectWithoutUserInput[]
    upsert?: BurnsUpsertWithWhereUniqueWithoutUserInput | BurnsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BurnsCreateManyUserInputEnvelope
    set?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    disconnect?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    delete?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    connect?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    update?: BurnsUpdateWithWhereUniqueWithoutUserInput | BurnsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BurnsUpdateManyWithWhereWithoutUserInput | BurnsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BurnsScalarWhereInput | BurnsScalarWhereInput[]
  }

  export type MunicipalitiesUpdateManyWithoutUserNestedInput = {
    create?: XOR<MunicipalitiesCreateWithoutUserInput, MunicipalitiesUncheckedCreateWithoutUserInput> | MunicipalitiesCreateWithoutUserInput[] | MunicipalitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MunicipalitiesCreateOrConnectWithoutUserInput | MunicipalitiesCreateOrConnectWithoutUserInput[]
    upsert?: MunicipalitiesUpsertWithWhereUniqueWithoutUserInput | MunicipalitiesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MunicipalitiesCreateManyUserInputEnvelope
    set?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    disconnect?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    delete?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    connect?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    update?: MunicipalitiesUpdateWithWhereUniqueWithoutUserInput | MunicipalitiesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MunicipalitiesUpdateManyWithWhereWithoutUserInput | MunicipalitiesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MunicipalitiesScalarWhereInput | MunicipalitiesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BurnsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BurnsCreateWithoutUserInput, BurnsUncheckedCreateWithoutUserInput> | BurnsCreateWithoutUserInput[] | BurnsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnsCreateOrConnectWithoutUserInput | BurnsCreateOrConnectWithoutUserInput[]
    upsert?: BurnsUpsertWithWhereUniqueWithoutUserInput | BurnsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BurnsCreateManyUserInputEnvelope
    set?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    disconnect?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    delete?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    connect?: BurnsWhereUniqueInput | BurnsWhereUniqueInput[]
    update?: BurnsUpdateWithWhereUniqueWithoutUserInput | BurnsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BurnsUpdateManyWithWhereWithoutUserInput | BurnsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BurnsScalarWhereInput | BurnsScalarWhereInput[]
  }

  export type MunicipalitiesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MunicipalitiesCreateWithoutUserInput, MunicipalitiesUncheckedCreateWithoutUserInput> | MunicipalitiesCreateWithoutUserInput[] | MunicipalitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MunicipalitiesCreateOrConnectWithoutUserInput | MunicipalitiesCreateOrConnectWithoutUserInput[]
    upsert?: MunicipalitiesUpsertWithWhereUniqueWithoutUserInput | MunicipalitiesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MunicipalitiesCreateManyUserInputEnvelope
    set?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    disconnect?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    delete?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    connect?: MunicipalitiesWhereUniqueInput | MunicipalitiesWhereUniqueInput[]
    update?: MunicipalitiesUpdateWithWhereUniqueWithoutUserInput | MunicipalitiesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MunicipalitiesUpdateManyWithWhereWithoutUserInput | MunicipalitiesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MunicipalitiesScalarWhereInput | MunicipalitiesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutBurnsInput = {
    create?: XOR<UsersCreateWithoutBurnsInput, UsersUncheckedCreateWithoutBurnsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBurnsInput
    connect?: UsersWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumBurnTypeFieldUpdateOperationsInput = {
    set?: $Enums.BurnType
  }

  export type EnumStateFieldUpdateOperationsInput = {
    set?: $Enums.State
  }

  export type UsersUpdateOneRequiredWithoutBurnsNestedInput = {
    create?: XOR<UsersCreateWithoutBurnsInput, UsersUncheckedCreateWithoutBurnsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBurnsInput
    upsert?: UsersUpsertWithoutBurnsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBurnsInput, UsersUpdateWithoutBurnsInput>, UsersUncheckedUpdateWithoutBurnsInput>
  }

  export type UsersCreateNestedOneWithoutMunicipalityInput = {
    create?: XOR<UsersCreateWithoutMunicipalityInput, UsersUncheckedCreateWithoutMunicipalityInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMunicipalityInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneWithoutMunicipalityNestedInput = {
    create?: XOR<UsersCreateWithoutMunicipalityInput, UsersUncheckedCreateWithoutMunicipalityInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMunicipalityInput
    upsert?: UsersUpsertWithoutMunicipalityInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMunicipalityInput, UsersUpdateWithoutMunicipalityInput>, UsersUncheckedUpdateWithoutMunicipalityInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumStateUserFilter<$PrismaModel = never> = {
    equals?: $Enums.StateUser | EnumStateUserFieldRefInput<$PrismaModel>
    in?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    not?: NestedEnumStateUserFilter<$PrismaModel> | $Enums.StateUser
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStateUserWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StateUser | EnumStateUserFieldRefInput<$PrismaModel>
    in?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateUser[] | ListEnumStateUserFieldRefInput<$PrismaModel>
    not?: NestedEnumStateUserWithAggregatesFilter<$PrismaModel> | $Enums.StateUser
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateUserFilter<$PrismaModel>
    _max?: NestedEnumStateUserFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBurnTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BurnType | EnumBurnTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBurnTypeFilter<$PrismaModel> | $Enums.BurnType
  }

  export type NestedEnumStateFilter<$PrismaModel = never> = {
    equals?: $Enums.State | EnumStateFieldRefInput<$PrismaModel>
    in?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    not?: NestedEnumStateFilter<$PrismaModel> | $Enums.State
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumBurnTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BurnType | EnumBurnTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BurnType[] | ListEnumBurnTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBurnTypeWithAggregatesFilter<$PrismaModel> | $Enums.BurnType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBurnTypeFilter<$PrismaModel>
    _max?: NestedEnumBurnTypeFilter<$PrismaModel>
  }

  export type NestedEnumStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.State | EnumStateFieldRefInput<$PrismaModel>
    in?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.State[] | ListEnumStateFieldRefInput<$PrismaModel>
    not?: NestedEnumStateWithAggregatesFilter<$PrismaModel> | $Enums.State
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateFilter<$PrismaModel>
    _max?: NestedEnumStateFilter<$PrismaModel>
  }

  export type BurnsCreateWithoutUserInput = {
    date: Date | string
    reason: string
    latitude: number
    longitude: number
    otherData?: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: $Enums.BurnType
    state?: $Enums.State
  }

  export type BurnsUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    reason: string
    latitude: number
    longitude: number
    otherData?: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: $Enums.BurnType
    state?: $Enums.State
  }

  export type BurnsCreateOrConnectWithoutUserInput = {
    where: BurnsWhereUniqueInput
    create: XOR<BurnsCreateWithoutUserInput, BurnsUncheckedCreateWithoutUserInput>
  }

  export type BurnsCreateManyUserInputEnvelope = {
    data: BurnsCreateManyUserInput | BurnsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MunicipalitiesCreateWithoutUserInput = {
    name: string
    taxNumber: string
    address: string
    state?: $Enums.State
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MunicipalitiesUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    taxNumber: string
    address: string
    state?: $Enums.State
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MunicipalitiesCreateOrConnectWithoutUserInput = {
    where: MunicipalitiesWhereUniqueInput
    create: XOR<MunicipalitiesCreateWithoutUserInput, MunicipalitiesUncheckedCreateWithoutUserInput>
  }

  export type MunicipalitiesCreateManyUserInputEnvelope = {
    data: MunicipalitiesCreateManyUserInput | MunicipalitiesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BurnsUpsertWithWhereUniqueWithoutUserInput = {
    where: BurnsWhereUniqueInput
    update: XOR<BurnsUpdateWithoutUserInput, BurnsUncheckedUpdateWithoutUserInput>
    create: XOR<BurnsCreateWithoutUserInput, BurnsUncheckedCreateWithoutUserInput>
  }

  export type BurnsUpdateWithWhereUniqueWithoutUserInput = {
    where: BurnsWhereUniqueInput
    data: XOR<BurnsUpdateWithoutUserInput, BurnsUncheckedUpdateWithoutUserInput>
  }

  export type BurnsUpdateManyWithWhereWithoutUserInput = {
    where: BurnsScalarWhereInput
    data: XOR<BurnsUpdateManyMutationInput, BurnsUncheckedUpdateManyWithoutUserInput>
  }

  export type BurnsScalarWhereInput = {
    AND?: BurnsScalarWhereInput | BurnsScalarWhereInput[]
    OR?: BurnsScalarWhereInput[]
    NOT?: BurnsScalarWhereInput | BurnsScalarWhereInput[]
    id?: IntFilter<"Burns"> | number
    date?: DateTimeFilter<"Burns"> | Date | string
    reason?: StringFilter<"Burns"> | string
    latitude?: FloatFilter<"Burns"> | number
    longitude?: FloatFilter<"Burns"> | number
    otherData?: StringNullableFilter<"Burns"> | string | null
    distrito?: StringFilter<"Burns"> | string
    concelho?: StringFilter<"Burns"> | string
    freguesia?: StringFilter<"Burns"> | string
    createdAt?: DateTimeFilter<"Burns"> | Date | string
    updatedAt?: DateTimeFilter<"Burns"> | Date | string
    userId?: IntFilter<"Burns"> | number
    type?: EnumBurnTypeFilter<"Burns"> | $Enums.BurnType
    state?: EnumStateFilter<"Burns"> | $Enums.State
  }

  export type MunicipalitiesUpsertWithWhereUniqueWithoutUserInput = {
    where: MunicipalitiesWhereUniqueInput
    update: XOR<MunicipalitiesUpdateWithoutUserInput, MunicipalitiesUncheckedUpdateWithoutUserInput>
    create: XOR<MunicipalitiesCreateWithoutUserInput, MunicipalitiesUncheckedCreateWithoutUserInput>
  }

  export type MunicipalitiesUpdateWithWhereUniqueWithoutUserInput = {
    where: MunicipalitiesWhereUniqueInput
    data: XOR<MunicipalitiesUpdateWithoutUserInput, MunicipalitiesUncheckedUpdateWithoutUserInput>
  }

  export type MunicipalitiesUpdateManyWithWhereWithoutUserInput = {
    where: MunicipalitiesScalarWhereInput
    data: XOR<MunicipalitiesUpdateManyMutationInput, MunicipalitiesUncheckedUpdateManyWithoutUserInput>
  }

  export type MunicipalitiesScalarWhereInput = {
    AND?: MunicipalitiesScalarWhereInput | MunicipalitiesScalarWhereInput[]
    OR?: MunicipalitiesScalarWhereInput[]
    NOT?: MunicipalitiesScalarWhereInput | MunicipalitiesScalarWhereInput[]
    id?: IntFilter<"Municipalities"> | number
    name?: StringFilter<"Municipalities"> | string
    taxNumber?: StringFilter<"Municipalities"> | string
    address?: StringFilter<"Municipalities"> | string
    state?: EnumStateFilter<"Municipalities"> | $Enums.State
    responsible?: IntNullableFilter<"Municipalities"> | number | null
    createdAt?: DateTimeFilter<"Municipalities"> | Date | string
    updatedAt?: DateTimeFilter<"Municipalities"> | Date | string
  }

  export type UsersCreateWithoutBurnsInput = {
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    municipality?: MunicipalitiesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutBurnsInput = {
    id?: number
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    municipality?: MunicipalitiesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutBurnsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBurnsInput, UsersUncheckedCreateWithoutBurnsInput>
  }

  export type UsersUpsertWithoutBurnsInput = {
    update: XOR<UsersUpdateWithoutBurnsInput, UsersUncheckedUpdateWithoutBurnsInput>
    create: XOR<UsersCreateWithoutBurnsInput, UsersUncheckedCreateWithoutBurnsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBurnsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBurnsInput, UsersUncheckedUpdateWithoutBurnsInput>
  }

  export type UsersUpdateWithoutBurnsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipality?: MunicipalitiesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutBurnsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipality?: MunicipalitiesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutMunicipalityInput = {
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    burns?: BurnsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutMunicipalityInput = {
    id?: number
    name: string
    email: string
    nif?: number | null
    password: string
    photo?: string | null
    type?: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: $Enums.StateUser
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    burns?: BurnsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutMunicipalityInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMunicipalityInput, UsersUncheckedCreateWithoutMunicipalityInput>
  }

  export type UsersUpsertWithoutMunicipalityInput = {
    update: XOR<UsersUpdateWithoutMunicipalityInput, UsersUncheckedUpdateWithoutMunicipalityInput>
    create: XOR<UsersCreateWithoutMunicipalityInput, UsersUncheckedCreateWithoutMunicipalityInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMunicipalityInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMunicipalityInput, UsersUncheckedUpdateWithoutMunicipalityInput>
  }

  export type UsersUpdateWithoutMunicipalityInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    burns?: BurnsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMunicipalityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nif?: NullableIntFieldUpdateOperationsInput | number | null
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumStateUserFieldUpdateOperationsInput | $Enums.StateUser
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    burns?: BurnsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BurnsCreateManyUserInput = {
    id?: number
    date: Date | string
    reason: string
    latitude: number
    longitude: number
    otherData?: string | null
    distrito: string
    concelho: string
    freguesia: string
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: $Enums.BurnType
    state?: $Enums.State
  }

  export type MunicipalitiesCreateManyUserInput = {
    id?: number
    name: string
    taxNumber: string
    address: string
    state?: $Enums.State
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BurnsUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
  }

  export type BurnsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
  }

  export type BurnsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    otherData?: NullableStringFieldUpdateOperationsInput | string | null
    distrito?: StringFieldUpdateOperationsInput | string
    concelho?: StringFieldUpdateOperationsInput | string
    freguesia?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumBurnTypeFieldUpdateOperationsInput | $Enums.BurnType
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
  }

  export type MunicipalitiesUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MunicipalitiesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MunicipalitiesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    taxNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    state?: EnumStateFieldUpdateOperationsInput | $Enums.State
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BurnsDefaultArgs instead
     */
    export type BurnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BurnsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MunicipalitiesDefaultArgs instead
     */
    export type MunicipalitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MunicipalitiesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}